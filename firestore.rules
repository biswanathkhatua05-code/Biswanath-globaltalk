
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users: Can read anyone's profile. Can only create/update their own profile.
    match /users/{userId} {
      allow read;
      allow create, update: if request.auth != null && request.auth.uid == userId;
    }

    // Global Chat: Anyone authenticated can read/write.
    match /global_messages/{messageId} {
      allow read, write: if request.auth != null;
    }

    // Private Chat Sessions:
    match /chat_sessions/{chatId} {
      // Participants can read/write the session document (e.g., for metadata)
      allow read, write: if request.auth != null && request.auth.uid in resource.data.participants;

      // Messages within a private chat
      match /messages/{messageId} {
        // Only participants of the chat can read or write messages.
        allow read, write: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/chat_sessions/$(chatId)).data.participants;
      }
    }

    // Random Chat Sessions Pool:
    match /random_chat_sessions_pool/{sessionId} {
        // Allow creating a new session.
        allow create: if request.auth != null;
        
        // Allow reading, updating (to join), and writing messages only by participants.
        // Joining a session (update): Check if user is becoming user2.
        // Reading session status: Check if user is a participant.
        allow read, update: if request.auth != null && (request.auth.uid == resource.data.userId1 || request.auth.uid == resource.data.userId2);

        // Messages within a random chat
        match /messages/{messageId} {
            allow read, write: if request.auth != null && (request.auth.uid == get(/databases/$(database)/documents/random_chat_sessions_pool/$(sessionId)).data.userId1 || request.auth.uid == get(/databases/$(database)/documents/random_chat_sessions_pool/$(sessionId)).data.userId2);
        }
    }
    
    // Videos, Likes, Comments - Kept for future use, doesn't harm anything.
    match /videos/{videoId} {
      allow read;
      allow update: if request.auth != null;
      allow create: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isCreator == true;
      
      match /comments/{commentId} {
        allow read, create: if request.auth != null;
      }
      
      match /likes/{userId} {
        allow read, create: if request.auth != null && request.auth.uid == userId;
      }
    }
  }
}
