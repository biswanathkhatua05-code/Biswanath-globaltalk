
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is signed in
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Helper function to check if a user is a designated Creator
    function isCreator() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isCreator == true;
    }

    // User Profiles: /users/{userId}
    match /users/{userId} {
      // Any signed-in user can view a user's profile.
      allow read: if isSignedIn();
      // Only the authenticated owner can create or update their own profile.
      allow write: if isOwner(userId);
    }

    // Global Chat Messages: /global_messages/{messageId}
    match /global_messages/{messageId} {
      allow read: if isSignedIn();
      // A signed-in user can create a message, but must be the author.
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      // No one can update or delete global messages to maintain chat history.
      allow update, delete: if false;
    }

    // Random Chat Sessions: /random_chat_sessions_pool/{sessionId}
    match /random_chat_sessions_pool/{sessionId} {
      allow read: if isSignedIn();
      // Allow creating a new session or updating an existing one (e.g., joining or disconnecting).
      allow write: if isSignedIn();

      // Messages within a random chat session
      match /messages/{messageId} {
        // Participants can read and write messages in their own chat.
        allow read, write: if isSignedIn() && (request.auth.uid == get(/databases/$(database)/documents/random_chat_sessions_pool/$(sessionId)).data.userId1 || request.auth.uid == get(/databases/$(database)/documents/random_chat_sessions_pool/$(sessionId)).data.userId2);
      }
    }
    
    // Private Chat Sessions: /chat_sessions/{sessionId}
    match /chat_sessions/{sessionId} {
      // Only participants involved in the chat can access it.
      // The session ID is a composite of sorted UIDs, so we check if the user's UID is in the session ID.
      allow read, write: if isSignedIn() && request.auth.uid in resource.id.split('_');

        // Messages within a private chat session
        match /messages/{messageId} {
            allow read, write: if isSignedIn() && request.auth.uid in resource.id.split('_');
        }
    }

    // Video Platform Content: /videos/{videoId}
    match /videos/{videoId} {
      allow read: if isSignedIn();
      allow create: if isCreator();
      allow update, delete: if isSignedIn() && get(/databases/$(database)/documents/videos/$(videoId)).data.creatorId == request.auth.uid;

      // Comments on a video
      match /comments/{commentId} {
        allow read: if isSignedIn();
        allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
        allow update, delete: if false;
      }
      
      // Likes on a video
      match /likes/{userId} {
        allow read: if isSignedIn();
        allow create: if isOwner(userId);
        allow update, delete: if false;
      }
    }
    
    // WebRTC Signaling for Video/Voice Calls
    match /video_calls/{callId} {
        allow read, write, delete: if isSignedIn();
    }

    match /voice_calls/{callId} {
        allow read, write, delete: if isSignedIn();
    }
  }
}
