
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper Functions
    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isRequestingOwnData(userId) {
      return request.auth.uid == userId;
    }

    function isPrivateChatParticipant(chatRoomId) {
        let participants = split(chatRoomId, '_');
        return request.auth.uid in participants;
    }
    
    function isRandomChatParticipant(sessionId) {
        let session = get(/databases/$(database)/documents/random_chat_sessions_pool/$(sessionId)).data;
        return request.auth.uid == session.userId1 || request.auth.uid == session.userId2;
    }

    // Public User Profiles - anyone can read
    match /users/{userId} {
      allow read: if true;
      allow write: if isUserAuthenticated() && isRequestingOwnData(userId);
    }
    
    // Global Chat Room
    match /global_messages/{messageId} {
      allow read: if true;
      allow create: if isUserAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if false; // Messages are immutable
    }
    
    // Private Chat Sessions
    match /chat_sessions/{chatRoomId}/messages/{messageId} {
      allow read, create: if isUserAuthenticated() && isPrivateChatParticipant(chatRoomId);
      allow update, delete: if false;
    }

    // Random Chat Sessions Pool
    match /random_chat_sessions_pool/{sessionId} {
      // Anyone can look for a waiting session
      allow list: if isUserAuthenticated();
      // Anyone can create a new session for themselves
      allow create: if isUserAuthenticated() && request.resource.data.userId1 == request.auth.uid;
      // Participants can read the session details
      allow read: if isUserAuthenticated() && isRandomChatParticipant(sessionId);
      // A second user can join (update), or participants can update status
      allow update: if isUserAuthenticated() && 
                      (
                        // Joining a waiting session
                        (request.resource.data.status == 'active' && resource.data.status == 'waiting' && request.resource.data.userId2 == request.auth.uid) ||
                        // Disconnecting
                        (request.resource.data.status == 'disconnected' && isRandomChatParticipant(sessionId))
                      );

      // Messages within a random chat
      match /messages/{messageId} {
        allow read, create: if isUserAuthenticated() && isRandomChatParticipant(sessionId);
        allow update, delete: if false;
      }
    }
    
    // Video Call Signaling (re-using for simplicity)
    // The callId should correspond to the chatRoomId
    match /video_calls/{callId} {
        allow read, write: if request.auth != null; // Simplified rule for now to prevent permission issues
        
        match /offerCandidates/{candidateId} {
            allow read, write: if request.auth != null;
        }

        match /answerCandidates/{candidateId} {
            allow read, write: if request.auth != null;
        }
    }

    // Voice Call Signaling
    match /voice_calls/{callId} {
        allow read, write: if request.auth != null; // Simplified rule to ensure functionality
        
        match /offerCandidates/{candidateId} {
            allow read, write: if request.auth != null;
        }

        match /answerCandidates/{candidateId} {
            allow read, write: if request.auth != null;
        }
    }
  }
}
